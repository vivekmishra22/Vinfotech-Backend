<> Registration Api (POST API)

- This reguser function is an asynchronous function that handles user registration in a Node.js application using Express.js.
- It interacts with a MongoDB database (via model).
- Utilizes bcrypt for password hashing and JWT (JSON Web Token) for authentication.
- Node.js application, likely using the Express.js framework, and it handles user registration.
- It includes checking if a user already exists, hashing the password, creating a new user, and generating a JSON Web Token (JWT) for authentication.

* 1. Function Declaration

    const reguser = async (req, res) => { ... }

- The function is assigned to a constant variable reguser.
- It is an asynchronous function (async keyword), meaning it will use await to handle asynchronous operations.
- It takes two parameters:
    - req (request) → contains user input from the client.
    - res (response) → used to send back responses to the client.

* 2. Extracting User Input

    const { fname, email, password, mobile, address, city, gender, subject } = req.body;

- The function extracts user-provided data from req.body, which comes from an HTTP request (usually a POST request) like fname : first name, password : password.


* 3. Checking if the User Already Exists

    const existingUser = await model.findOne({ email });
    if (existingUser) {
        return res.status(409).json({ message: 'User already exists' });
    }

- await model.findOne({ email }):
- Queries the database (model represents the user model) to check if a user with the given email already exists.
- If a user exists, it sends a 409 Conflict response:
- model.findOne({ email }):
- model is likely a Mongoose model representing the User collection in a MongoDB database.
- findOne is a Mongoose method that queries the database to find a document that matches the provided query (in this case, the email).

- if (existingUser):
- If a user with the same email exists, the function returns a { 409 Conflict HTTP status ] code with a message 'User already exists'.
- This prevents duplicate registrations

* 4. Hashing the Password

    const hashedPassword = await bcrypt.hash(password, saltRounds);

- Purpose: Passwords should never be stored in plain text for security reasons. This step hashes the password before saving it to the database.

  *  { bcrypt.hash(password, saltRounds): ]

- [ bcrypt is a library used for hashing passwords.
- [ password is the plain-text password provided by the user during registration.
- [ saltRounds is a parameter that determines the complexity of the hash. A higher number means more security but also more computational time, it determines how many times the hashing algorithm runs, making it harder to crack.

* 5. Creating the New User

    const newUser = await model.create({
        fname,
        email, 
        password: hashedPassword, 
        mobile, 
        address, 
        city, 
        gender, 
        subject
    });

- Purpose: This step creates a new user in the database.


- [ model.create({...}):
- model.create is a Mongoose method that inserts a new document into the database.
- The object passed to create contains the user's details like fname, password(The hashed password (not the plain-text password)).
- Creates a new user document in MongoDB.
- The password is stored in hashed format for security.

* 5. Generate JWT Token

    const token = jwt.sign({ email: newUser.email, id: newUser._id }, secret, { expiresIn: '1h' });
            OR
        const token = jwt.sign(
            { email: newUser.email, id: newUser._id }, 
            secret, 
            { expiresIn: '1h' }
        );

     [ jwt.sign(payload, secret, options):

- jwt is a library used for creating and verifying JSON Web Tokens, [ Creates a JWT (JSON Web Token), used for authentication [.

- Payload (Data inside the token): The data to be embedded in the token. In this case, it includes the user's email and id (MongoDB _id)
        email: The user’s email.
        id: The unique user ID (_id) assigned by MongoDB
- email: The user’s email.
- id: The unique user ID (_id) assigned by MongoDB.

- Secret Key (secret): A secret key used to sign the token. This should be stored securely in the environment variables.
- Used to sign the token (should be stored securely, e.g., in .env).

- Token Expiry:
- { expiresIn: '1h' } → Token is valid for 1 hour, Additional options for the token. Here, expiresIn: '1h' sets the token to expire after 1 hour.

* 7. Sending the Response

    return res.status(201).json({ user: newUser, token });

Purpose: This sends a response back to the client indicating that the user was successfully registered.

- [ Sends a 201 Created response[ with:
    - user: The newly created user’s details.
    - token: The JWT authentication token.

    json({ user: newUser, token }):
- Sends a JSON response containing
- user: The newly created user object (excluding the hashed password for security reasons).
- token: The JWT token generated for the user.

    Security Considerations:

    - Password Hashing: Always hash passwords before storing them in the database.
    - JWT Security: Use a strong secret key for signing JWTs and store it securely (e.g., in environment variables).
    - Error Handling: Avoid exposing sensitive information in error messages.
    - Validation: Validate user input (e.g., email format, password strength) before processing it.

* 8. Handling Errors

    } catch (error) {
        console.error('Error in user registration:', error);
        return res.status(500).json({ message: 'Internal server error' });
    }

- console.error: This is a method used to print error messages to the console. It is similar to console.log, but it is specifically intended for errors.
- 'Error in user registration:': This is a custom message that provides context about where the error occurred.

    res.status(500):
- Sets the HTTP status code to 500 Internal Server Error.

* Summary of Workflow
- Extract user data from req.body.
- Check if the email already exists in the database.
- Hash the password using bcrypt.
- Create the new user in the database.
- Generate a JWT token for authentication.
- Send a success response with user data and token.
- Handle errors and return a 500 Internal Server Error if something goes wrong.

    [ The login function handles user authentication in a Node.js application using Express.js, MongoDB, bcrypt, and JWT ( JSON Web Token ).
    [ This function is responsible for authenticating a user by verifying their email and password, generating a JSON Web Token (JWT) for successful logins, and handling errors gracefully.

* 1. Function Definition

    const login = async (req, res) => {

- Purpose: This is an asynchronous function that handles user login requests.
- Parameters:
    - req: The request object, which contains data sent by the client (e.g., email and password).
    - res: The response object, used to send data back to the client.

* 2. Extract User Input

    const { email, password } = req.body;

- The email and password are extracted from the request body (req.body).

* 3. Check if User Exists

    const user = await model.findOne({ email });

    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }

-  Searches the database for a user with the provided email.
- If no user is found, returns a 404 Not Found response.
- If a user is found, user will contain the user's data; otherwise, it will be null.

    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }

-  Purpose: If no user is found with the provided email, the function returns an error response.
- If user is null, it means no user exists with the given email.
- The server responds with a 404 Not Found status code and a JSON message: 'User not found'.

* 4. Validate Password

    const isPasswordCorrect = await bcrypt.compare(password, user.password);

    if (!isPasswordCorrect) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

- Purpose: Verifies that the provided password matches the hashed password stored in the database.
- bcrypt.compare(password, user.password) compares the plain-text password provided by the user with the hashed password stored in the database.
- bcrypt is a library used for secure password hashing and comparison.
- If the passwords match, isPasswordCorrect will be true; otherwise, it will be false
- Uses bcrypt.compare() to check if the provided password matches the hashed password stored in the database.
- If the password is incorrect, returns a 401 Unauthorized response.

    if (!isPasswordCorrect) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

- Purpose: If the password is incorrect, the function returns an error response.
- If isPasswordCorrect is false, it means the password provided by the user does not match the stored hashed password.
- The server responds with a 401 Unauthorized status code and a JSON message: 'Invalid credentials'.
- The return statement ensures the function exits immediately.

* 5. Generate JWT Token

    const token = jwt.sign({ email: user.email, id: user._id }, secret, { expiresIn: '1h' });

- Purpose: Generates a JSON Web Token (JWT) for the authenticated user.
- Creates a JWT token that includes the user’s email and id.
- The token is valid for 1 hour.

* 6. Send Response

    return res.json({ email: user.email, token });

- Purpose: Sends a success response to the client with the user's email and the generated JWT token.
- The server responds with a 200 OK status code (default for res.json).
- The response body contains:
    - email: The authenticated user's email.
    - token: The JWT token, which the client can use for authenticated requests.

* 7. Error Handling

    catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Internal server error' });
    }

- Catches unexpected errors and returns a 500 Internal Server Error.
